Инструкция по запуску проекта:

  📁 Инструкция по запуску проекта
  Убедитесь, что у вас установлен Node.js.

  Клонируйте репозиторий:

  git clone https://github.com/futoreqa/valentin.git
  cd valentin/JS/Индивидуальные работы/Индивидуальная работа №3.js
  Запустите проект:
  Откройте файл Индивидуальная работа №3.js в любом редакторе кода (например, VS Code).
  Запустите файл с помощью Node.js:
  node "Индивидуальная работа №3.js"

Описание лабораторной работы : 
  В данной лабораторной работе была разработана консольная система управления игровым инвентарём с использованием возможностей 
  объектно-ориентированного программирования на языке JavaScript. Основная цель работы заключалась в изучении и применении классов, 
  наследования, а также взаимодействия с пользователем через консоль.

  В рамках работы реализованы два класса: базовый класс Item, представляющий обычный предмет с такими свойствами, как название, вес и редкость,
  и производный класс Weapon, расширяющий Item дополнительными характеристиками — урон и прочность, а также методами использования и ремонта оружия.

Краткая документация к проекту
    Программа реализует консольное приложение для управления игровым инвентарём, 
    позволяя создавать и хранить обычные предметы и оружие, а также выполнять базовые 
    операции с ними (просмотр, использование, ремонт).

  Основные компоненты:

    Класс Item — представляет обычный предмет с параметрами: название, вес, редкость.
    Класс Weapon — наследует Item, добавляет урон и прочность, методы использования и ремонта.
    Инвентарь — массив для хранения экземпляров предметов и оружия.
    Консольное меню — реализовано с помощью readline, предоставляет пользователю возможности:
    Добавить предмет или оружие
    Просмотреть содержимое инвентаря
    Использовать оружие (снижает прочность)
    Починить оружие (восстанавливает прочность)
    Выйти из программы

    Ключевые методы

    getInfo() — возвращает строку с информацией о предмете или оружии.
    use() — уменьшает прочность оружия, выводит сообщение при поломке
    repair() — восстанавливает прочность оружия до 100%.

Примеры использования проекта с приложением скриншотов или фрагментов кода
              
        class Item {
                  /**
                   * Создаёт новый предмет.
                   * @param {string} name - Название предмета.
                   * @param {number} weight - Вес предмета в килограммах.
                   * @param {string} rarity - Редкость предмета (common, uncommon, rare, legendary).
                   */
                  constructor(name, weight, rarity) {
                      this.name = name;
                      this.weight = weight;
                      this.rarity = rarity;
                  }
              
                  /**
                   * Возвращает строку с информацией о предмете.
                   * @returns {string} Информация о предмете.
                   */
                  getInfo() {
                      return `Name: ${this.name}, Weight: ${this.weight}kg, Rarity: ${this.rarity}`;
                  }
              
                  /**
                   * Устанавливает новый вес предмета.
                   * @param {number} newWeight - Новый вес.
                   */
                  setWeight(newWeight) {
                      this.weight = newWeight;
                  }
              }
              
              /**
               * Представляет оружие — расширение обычного предмета.
               * @extends Item
               */
              class Weapon extends Item {
                  /**
                   * Создаёт новое оружие.
                   * @param {string} name - Название оружия.
                   * @param {number} weight - Вес оружия.
                   * @param {string} rarity - Редкость оружия.
                   * @param {number} damage - Урон, наносимый оружием.
                   * @param {number} durability - Прочность оружия (от 0 до 100).
                   */
                  constructor(name, weight, rarity, damage, durability) {
                      super(name, weight, rarity);
                      this.damage = damage;
                      this.durability = durability;
                  }
              
                  /**
                   * Использует оружие, снижая его прочность.
                   */
                  use() {
                      if (this.durability > 0) {
                          this.durability = Math.max(0, this.durability - 10);
                      } else {
                          console.log(`${this.name} сломано!`);
                      }
                  }
              
                  /**
                   * Чинит оружие, восстанавливая прочность до 100%.
                   */
                  repair() {
                      this.durability = 100;
                  }
              
                  /**
                   * Возвращает строку с информацией об оружии.
                   * @returns {string} Информация об оружии.
                   */
                  getInfo() {
                      return `${super.getInfo()}, Damage: ${this.damage}, Durability: ${this.durability}%`;
                  }
              }
              
              // === Инвентарь для хранения предметов и оружия ===
              const inventory = [];
              
              const rl = readline.createInterface({
                  input: process.stdin,
                  output: process.stdout
              });
              
              /**
               * Показывает главное меню и обрабатывает ввод пользователя.
               */
              function menu() {
                  console.log("\n=== Меню инвентаря ===");
                  console.log("1. Добавить предмет");
                  console.log("2. Добавить оружие");
                  console.log("3. Показать инвентарь");
                  console.log("4. Использовать оружие");
                  console.log("5. Починить оружие");
                  console.log("6. Выход");
                  rl.question("Выберите опцию: ", handleMenu);
              }
              
              /**
               * Обрабатывает выбор пользователя в меню.
               * @param {string} choice - Введённая пользователем опция.
               */
              function handleMenu(choice) {
                  switch (choice) {
                      case "1":
                          addItem();
                          break;
                      case "2":
                          addWeapon();
                          break;
                      case "3":
                          viewInventory();
                          break;
                      case "4":
                          useWeapon();
                          break;
                      case "5":
                          repairWeapon();
                          break;
                      case "6":
                          rl.close();
                          break;
                      default:
                          console.log("Неверный выбор.");
                          menu();
                  }
              }
              
              /**
               * Добавляет новый обычный предмет в инвентарь.
               */
              function addItem() {
                  rl.question("Введите название предмета: ", name => {
                      rl.question("Введите вес: ", weight => {
                          rl.question("Введите редкость (common/uncommon/rare/legendary): ", rarity => {
                              inventory.push(new Item(name, parseFloat(weight), rarity));
                              console.log("Предмет добавлен.");
                              menu();
                          });
                      });
                  });
              }
              
              /**
               * Добавляет новое оружие в инвентарь.
               */
              function addWeapon() {
                  rl.question("Введите название оружия: ", name => {
                      rl.question("Введите вес: ", weight => {
                          rl.question("Введите редкость (common/uncommon/rare/legendary): ", rarity => {
                              rl.question("Введите урон: ", damage => {
                                  rl.question("Введите прочность (0-100): ", durability => {
                                      inventory.push(new Weapon(name, parseFloat(weight), rarity, parseInt(damage), parseInt(durability)));
                                      console.log("Оружие добавлено.");
                                      menu();
                                  });
                              });
                          });
                      });
                  });
              }
              
              /**
               * Показывает содержимое инвентаря.
               * @param {boolean} [showMenuAfter=true] - Показывать ли меню после вывода.
               */
              function viewInventory(showMenuAfter = true) {
                  if (inventory.length === 0) {
                      console.log("Инвентарь пуст.");
                  } else {
                      inventory.forEach((item, index) => {
                          console.log(`${index + 1}. ${item.getInfo()}`);
                      });
                  }
                  if (showMenuAfter) {
                      menu();
                  }
              }
              
              /**
               * Позволяет пользователю использовать оружие из инвентаря.
               */
              function useWeapon() {
                  if (inventory.length === 0) {
                      console.log("Инвентарь пуст.");
                      menu();
                      return;
                  }
              
                  viewInventory(false);
                  rl.question("Введите номер оружия для использования: ", idx => {
                      const i = parseInt(idx) - 1;
                      const item = inventory[i];
                      if (item instanceof Weapon) {
                          item.use();
                          console.log(`Оружие ${item.name} использовано. Прочность: ${item.durability}%`);
                      } else {
                          console.log("Это не оружие.");
                      }
                      menu();
                  });
              }
              
              /**
               * Позволяет пользователю починить оружие из инвентаря.
               */
              function repairWeapon() {
                  if (inventory.length === 0) {
                      console.log("Инвентарь пуст.");
                      menu();
                      return;
                  }
              
                  viewInventory(false);
                  rl.question("Введите номер оружия для починки: ", idx => {
                      const i = parseInt(idx) - 1;
                      const item = inventory[i];
                      if (item instanceof Weapon) {
                          item.repair();
                          console.log(`${item.name} отремонтировано.`);
                      } else {
                          console.log("Это не оружие.");
                      }
                      menu();
                  });
              }
Ответы на контрольные вопросы

    1. Какое значение имеет this в методах класса? 
      В методах класса this ссылается на конкретный экземпляр объекта, вызвавший этот метод. 
      То есть внутри метода this указывает на тот объект, для которого был вызван метод, позволяя 
      обращаться к его свойствам и другим методам. Это поведение аналогично методам в обычных объектах JavaScript. 
      В классах this определяется в момент вызова метода и обычно указывает на экземпляр класса. 
    2. Как работает модификатор доступа # в JavaScript? 
      Модификатор # в JavaScript используется для объявления приватных полей и методов класса. 
      Такие поля и методы доступны только внутри самого класса и недоступны из внешнего кода или 
      у экземпляров класса. 
    3. В чем разница между классами и функциями-конструкторами? 
      Классы в JavaScript позволяет создавать объекты и наследовать их более понятным и структурированным способом. 
      Функции-конструкторы — более старый способ создания объектов с помощью обычных функций, которые вызываются 
      с new и манипулируют свойством this для инициализации. Главные отличия: Синтаксис: классы имеют более читаемый 
      и декларативный синтаксис, а функции-конструкторы — более низкоуровневый и менее наглядный. 














































P.S : НО ЭТО НЕ ТОЧНО
